/*
 * $Id$
 * (c) Copyright 2000 wingS development team.
 *
 * This file is part of wingS (http://wings.mercatis.de).
 *
 * wingS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * Please see COPYING for the complete licence.
 */

package org.wings.event;

import org.wings.*;
import java.awt.AWTEvent;

/**
 * A low-level event which indicates that a component moved, changed
 * size, or changed visibility (also, the root class for the other 
 * component-level events).

 * Component events are provided for notification purposes ONLY;
 * WingS will automatically handle component moves and resizes
 * internally so that GUI layout works properly regardless of
 * whether a program is receiving these events or not.

 * In addition to serving as the base class for other component-related
 * events (InputEvent, FocusEvent, WindowEvent, ContainerEvent),
 * this class defines the events that indicate changes in
 * a component's size, position, or visibility. 
  
 * This low-level event is generated by a component object (such as a 
 * SList) when the component is moved, resized, rendered invisible, or made
 * visible again. The event is passed to every ComponentListener or 
 * ComponentAdapter object which registered to receive such
 * events using the component's addComponentListener method.
 * (ComponentAdapter objects implement the 
 * ComponentListener interface.) Each such listener object 
 * gets this ComponentEvent when the event occurs.
 *
 * @see org.wings.event.ComponentAdapter
 * @see org.wings.event.ComponentListener
 * @author <a href="mailto:andre@lison.de">Andre Lison</a>
 * @version $Revision$, $Date$
 */
public class SComponentEvent
    extends java.awt.AWTEvent
{
    /**
     * The first number in the range of ids used for component events.
     */
    public static final int COMPONENT_FIRST = 1 << 0;

    /**
     * This event indicates that the component was rendered invisible.
     */
    public static final int COMPONENT_HIDDEN = 1 << 1;

    /**
     * The last number in the range of ids used for component events.
     */
    public static final int COMPONENT_LAST = 1 << 2;
    
    /**
     * This event indicates that the component's position changed.
     */
    public static final int COMPONENT_MOVED = 1 << 3;
	
    /**
     * This event indicates that the component's size changed.
     */
    public static final int COMPONENT_RESIZED = 1 << 4;

    /**
     * This event indicates that the component was made visible.
     */
    public static final int COMPONENT_SHOWN = 1 << 5;
	
    /**
     * Constructs a ComponentEvent object.
     * @param aSource the Component object that originated the event
     * @param aId an integer indicating the type of event
     */
    public SComponentEvent(SComponent aSource, int aId) {
        super(aSource, aId);
    }

    /**
     * Returns the originator of the event.
     * @return the Component object that originated the event
     */
    public SComponent getComponent() {
        return (SComponent) source;
    }

    public String toString() {
        return "ComponentEvent[source=" + source + "; " + paramString() + "]";
    }

    /**
     * Returns a string representing the state of this event. This 
     * method is intended to be used only for debugging purposes, and the 
     * content and format of the returned string may vary between implementations.
     * The returned string may be empty but may not be <tt>null</tt>.
     * @return a string representation of this event.          
     */
    public String paramString() {
        if (source == null)
            return "no source";

        String typeStr;
        SDimension d = ((SComponent)source).getPreferredSize();

        switch (id) {
        case COMPONENT_SHOWN:
            typeStr = "COMPONENT_SHOWN";
            break;
        case COMPONENT_HIDDEN:
            typeStr = "COMPONENT_HIDDEN";
            break;
        case COMPONENT_MOVED:
            typeStr = "COMPONENT_MOVED ("+ d.width + "x" + d.height + ")";
            break;
        case COMPONENT_RESIZED:
            typeStr = "COMPONENT_RESIZED (" + d.width + "x" + d.height + ")";
            break;
        default:
            typeStr = "unknown type";
        }
        return typeStr;
    }
}

/*
 * Local variables:
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 */

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<book lang="en">
  <title>wingS User Guide</title>

  <bookinfo>
    <date>June 8, 2005</date>

    <author>
      <surname>wingS Project Team</surname>
    </author>

    <subtitle>Writing and understanding wingS applications.</subtitle>

    <copyright>
      <year>2005</year>

      <holder>wingS Project Team</holder>
    </copyright>

    <legalnotice>
      <para>Permission is granted to copy, distribute and/or modify this
      document under the terms of the <ulink
      url="http://www.gnu.org/licenses/licenses.html#FDL">GNU Free
      Documentation License</ulink>, Version 1.2 or any later version
      published by the Free Software Foundation; with no Invariant Sections,
      with no Front-Cover texts, and with no Back-Cover Texts. A copy of the
      license is included in the section entitled "<link linkend="gfdl">GNU
      Free Documentation License</link>" .</para>
    </legalnotice>

    <releaseinfo>Version 0.5</releaseinfo>
  </bookinfo>

  <preface>
    <title>Preface</title>

    <section>
      <title>Target Audience</title>

      <para>This document is intended to serve curious novices to wingS,
      developers using wingS, and developers willing to look into its
      internals. The further you progress in this document, the deeper you are
      getting to the core of wingS.</para>

      <para>Chapter 1 provides an introduction to the concepts of wingS.
      Chapter 2 takes you through a step-by-step tutorial on how to write a
      wingS application and make it fly. Once you decide to develop an
      application chapter 3 will lead you through the wingS tool- and mindset.
      Chapter 4 is an architectural orientation to aid in understanding how
      wingS works. It tries to fill in enough background information such that
      a newcomer will be able to quickly understand wingS source code and code
      examples since there is plenty of demo code that you can look at.</para>

      <para>For management-oriented information please refer to the wingS
      whitepaper<footnote>
          <para><ulink
          url="http://www.j-wings.org/tiki-index.php?page=Documentation">wingS
          project hompage</ulink></para>
        </footnote>.</para>
    </section>

    <section>
      <title>Typographical Conventions</title>

      <para><code>session.Session</code> - a wingS class name (the org.wings
      part of the full name is elided, but subnames, as in this example are
      shown)</para>

      <para>"TODO" labels call out to you. Yes, you! Participate in the effort
      to build a first-class documentation, give something back!</para>
    </section>

    <section>
      <title>Credits</title>

      <para>Contributions to this documentation were provided by Ian Gardner,
      Benjamin Schmid, Volker Fritzsch, and Oliver Scheck.</para>
    </section>
  </preface>

  <chapter status="draft">
    <title>The Basics</title>

    <section>
      <title>The Swing in wingS</title>

      <para>The Java Foundation Classes (JFC) and its Swing API are known by
      nearly every Java developer. Its inherent MVC2 model is solid, yet
      flexible and fairly easy to learn. These reasons led to the idea to
      create an API with the Swing-feel, but generating and handling web
      applications. This idea is the underlying theme of wingS.</para>

      <para>So where is the Swing in wingS?</para>

      <section>
        <title>Widgets</title>

        <para>Suppose you want to display a table. Having Swing in mind, you'd
        implement an <code>AbstractTableModel</code> and associate it with a
        <code>JTree</code> instance which you placed in a JFrame. Now with
        wingS you do just the same, except you replace J's with S's. That's
        it! Apart from this prefix character of widget names the code is
        identical.</para>

        <para>For nearly every J&lt;xxx&gt; component of Swing you find a
        S&lt;xxx&gt; counterpart in wingS with similar or identical
        behavior.</para>
      </section>

      <section>
        <title>MVC - Events and Listeners</title>

        <para>Futhermore, suppose you want to react on mouse clicks (selection
        events) in your table. Again, doing it the Swing way, you'd provide a
        <code>ListSelectionModel</code> implementaiton and register a
        <code>ListSelectionListener</code>. The exact same code will work in
        wingS, no difference to Swing.</para>

        <para>So wingS relies on the model, listener and event infrastructure
        of Swing, since there is no need to reinvent the wheel.</para>
      </section>
    </section>

    <section>
      <title>Web-related Concepts</title>

      <para>With the Swing feel of wingS, you sometimes forget you develop for
      a web application context. But there are concepts intrinsic to the web
      that wingS neither hide, nor intend to hide. Understanding these simple
      concepts help you in creating successful projects.</para>

      <section>
        <title>Servlet API</title>

        <para>Despite all of wingS's magic, at the end of the day a wingS
        applications is nothing else but a servlet. Quite some servlet
        though.</para>

        <para>This means you will need a servlet container, such as Tomcat,
        Jetty, or JRun to execute wingS applications.</para>

        <para>During application development you typically don't notice the
        servlet environment your application wil run in. In fact, it is only
        in the web.xml where you need to do anything servlet-related. It
        certainly helps to be aware of it's underlying servlet foundation, as
        you will see in succeeding chapters.</para>
      </section>

      <section>
        <title>Templates - Separating View and Logic</title>

        <para>When developing web applications it proves very useful—if not
        necessary—to keep business logic separate from graphical
        representation. Frankly, you shoud never set any visual attributes in
        business logic. It will get you into trouble sooner or later.</para>

        <para>wingS provides a simple, but empowering concept for this
        separation. First, you create a XHTML template, structurally and
        visually defining a component or the complete screen. Then, put in
        <code>object</code> elements, give them a name. These elements will be
        replaced with by the real components at runtime.</para>

        <para>See <link linkend="STemplateLayout">STemplateLayout</link> for
        how this is done.</para>
      </section>

      <section>
        <title>Style</title>

        <para>TODO</para>
      </section>
    </section>
  </chapter>

  <chapter status="draft">
    <title>The 3-Step Quick Start</title>

    <para>TODO</para>

    <section>
      <title>Get ready - Writing a wingS Frame</title>

      <para>TODO</para>
    </section>

    <section>
      <title id="web_xml_file">Set - Preparing the web.xml File</title>

      <para>TODO</para>
    </section>

    <section>
      <title>Go! - Deployment in Servlet Container</title>

      <para>TODO</para>
    </section>
  </chapter>

  <chapter>
    <title>The Developer's Perspective</title>

    <para>This chapter presents what you need to know to develop with the
    wingS library.</para>

    <sect1>
      <title>Application Startup and Configuration</title>

      <para>still some TODO</para>
      
      <sect2>
      	<title>Overwritable config files</title>
	      <para>The default config files reside inside the jar file. Take a look
	      at the jar container to learn what you can do with them. They should be
	      documented. If you want to overwrite any of the settings in the config
	      files, you can do that by providing a file in the WEB-INF directory of
	      your web application. The naming scheme is the following: If you want to
	      overwrite some properties from the file at classpath 
	      <code>org/wings/plaf/css/default.properties</code>, you need to put a file named
	      <code>org.wings.plaf.css.default.properties</code> into the WEB-INF directory. That
	      file will then be read on top of the default file, so you just need to
	      overwrite the settings you want to change.
	      </para>
	
	      <para>The files that I know of you can change via this method are:
	      <code>org/wings/plaf/css/default.properties</code>
	      and
	      <code>org/wings/util/charset.properties.</code>
	      </para>
	  </sect2>
    </sect1>

    <sect1>
      <title>Frames and Top-Level Components</title>

      <para>TODO</para>
    </sect1>

    <sect1>
      <title id="LayoutManager">Layout Managers</title>

      <para>TODO</para>

      <sect2>
        <title>Swing-like Layout Managers</title>

        <para>TODO</para>
      </sect2>

      <sect2 id="STemplateLayout">
        <title>STemplateLayout</title>
 <para>Contrary to the other layout managers the STemplateLayout is a static layout manager.
 Like any other layout manager it allows to place arbitrary elements, but you can
 write a simple HTML-page being the template for your container component.
 Though we encourage the use of the dynamic layout managers, this layout manager can be
 very usedful in realising the main page layout of your web application.</para>
 <para>
 To use this layout manager you have to define a template file required by the STemplateLayout
 instance. Inside this template file you can insert inside your custom HTML code desired
 wingS objects using tags like <code>&lt;input name=&quot;compname&quot;&gt;</code>
 or <code>&lt;object name=&quot;compname&quot;&gt;&lt;/object&gt;</code>
 </para>
<para>
  The name attribute of these <code>input</code> or <code>object</code> tag is the name
  you have to use as layout constraint when you add the desired component to the
  template layout managed SContainer:
 <code>panel.add(new SLabel("a test label), "compname"));</code>
</para>
 <para>Besides this simple inlining mechanism the STemplateLayout manager has also another
  very powerful feature: Specific components bean attributes can be overwritten by
  specific optional inline attributes attached to your <code>object</code> html tags i.e. like
  <code>&lt;object name="compname" background="#ff0000" text="new text"&gt;&lt;/object&gt;</code>
 </para>
 <para>
  This feature can be very useful if i.e. a web developer is soley responsible for the whole application Look &amp; Feel.
  Depending on the type of the arranged component he can modify different visual properties (i.e. background color,
  display text, etc.) just by modifying the template file.
  I.e. let's assume you are placing the mentioned label oject in you template file. The the web designer can
  overwrite the components background, display text, etc. by modifying his object inclusion tag to
 <code>&lt;object name="aConstraintName" background="#ff0000" text="new text"&gt;&lt;/object&gt;</code>
</para>
          <para>Please refer to the javadoc of the PropertyManager interface and its
          implementors to find out which properties are supported for which classes.</para>
<para>
  Sample template file:
  <programlisting>
  &lt;HTML&gt;&lt;BODY&gt;
  Name der Person: &lt;COMPONENT NAME=NAME&gt;&lt;BR&gt;
  Vorname der Person: &lt;COMPONENT NAME=VORNAME ICON="vorname.gif"&gt;&lt;BR&gt;
  Wohnort der Person: &lt;COMPONENT NAME=WOHNORT&gt;&lt;BR&gt;
  &lt;/BODY&gt;&lt;/HTML&gt;
 </programlisting>
 According java sample code:
 <programlisting>
  templateContainer.setLayout(new STemplateLayout("templatefile"));
  templateContainer.addComponent(new SLabel("Haaf"), "NAME");
  templateContainer.addComponent(new SButton("Armin"), "VORNAME");
  templateContainer.addComponent(new SLabel("Neu-Ulm"), "WOHNORT");
 </programlisting>
  </para>
      </sect2>
    </sect1>

    <sect1>
      <title>User Input</title>

      <para>Input to your wingS application comes in the form of state changes
      to the various widgets you have created, and in application events that
      you can listen to. To illustrate this we use the simplest case of a form
      which contains an entry field and a button.</para>

      <sect2>
        <title>Entry Field</title>

        <para>Recall that user input for entry fields must be contained in a
        <code>SForm</code>. The first task is to create the form and entry
        field (layout details omitted):<programlisting>SForm form = new SForm();
// ... add to top pane, add layout
// The following assumes a template layout, the names "W1", "W2" 
// identify layout components
SLabel label = new SLabel("Enter stuff:");
form.add(label, "W1");
STextField text = new STextField("initial value");
form.add(text, "W2");</programlisting></para>

        <para>The text field variable might be made a class member variable so
        that you can access it later to retrieve its contents:<programlisting>String dataValue = text.getText();</programlisting></para>

        <para>Alternatively you might declare it as a local final variable,
        and access it from within a local closure callback, reacting to user
        input as shown in the next section.</para>
      </sect2>

      <sect2>
        <title>Listening to Events</title>

        <para>Most widgets provide various "listener" interfaces so that you
        can supply your own callbacks in order to handle these. Here we create
        a push button and register a callback to receive notification when the
        button is pushed. Note that the button is declared final so that we
        can access it within the callback, alternatively we could have made it
        a member variable<programlisting>final SButton submit = new SButton("Search");
form.add(submit, "W3");
ActionListener al = new ActionListener() {
  public void actionPerformed(ActionEvent e) { ... }
};
submit.addActionListener(al);</programlisting></para>

        <para>In the above example the callback only receives events when the
        button is pushed. An alternative is to make the form the listener,
        since if the form is to have a "default" button (when the user hits
        the enter key) then it is the form which will be notified. In this
        case you would add the listener callback to the form instead of the
        button:<programlisting>form.addActionListener(al);</programlisting></para>

        <para>The ActionEvent.getSource() will determine whether the event
        comes from the button or the form so you can use the following tests
        in your callback:<programlisting>public void actionPerformed(ActionEvent e) {
  if(submit == e.getSource())
  // submit button pushed
  if(form == e.getSource())
  // user hit enter key
}</programlisting></para>

        <para>You can extract data from the text field as shown above with a
        call to STextField.getText().</para>
      </sect2>
    </sect1>

    <sect1>
      <title>CSS Style</title>

      <sect2>
        <title>Default Styles</title>

        <para>wingS makes heavy use of CSS styles. The default wingS
        distribution contains stylesheets on a per browser basis at
        org/wings/plaf/css/browsername.css. These stylesheets contain the
        necessary styles for wingS to function and the basic styling.</para>
      </sect2>

      <sect2>
        <title>Custom Styles</title>

        <para>As well as modifying the default styles, you can customise
        component's styles programmatically. An example of this is in the
        wingset demo. In this case the new styles are held in a global, static
        stylesheet file. Hence the stylesheet is added to the main frame to
        ensure it can apply to all components.<programlisting>frame = new SFrame("WingSet");
frame.addHeader(new Link("stylesheet", 
                         null,
                         "text/css",
                         null, 
                         new ClasspathResource("/wingset/css/myapp.css",
                                               "text/css")));</programlisting></para>

        <para>The stylesheet contains various customised styles, in this case
        a custom table header:<programlisting>.table_hdr  { 
  background-color: #FFCC99 
}</programlisting></para>

        <para>By using a call to
        <code>STable.setHeaderStyle("table_hdr")</code> the default table
        style is overriden. Note that all components have a
        <code>SComponent.setStyle()</code> method to override their CSS style
        class (i.e. the name for the CSS class which bundles together their
        display attributes). The individual display attributes are stored in a
        <code>AttributeSet</code> member. See for example
        <code>SComponent.setAttribute</code>().</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Sharing Resources Among Servlets</title>

      <para>Architectural requirements often suggest a break-up of a web
      application into multiple servlets. Sharing common resources can be
      achieved with the ServletContext interface's methods for handling
      attributes.</para>

      <para>To make a resource (any Java object) available across servlets use
      the setAttribute() method:<programlisting>ServletContext context = SessionManager.getSession().getServletContext();
context.setAttribute("app.resource", new SharedResource());</programlisting></para>

      <para>Within a second servlet use getAttribute() to retrieve a reference
      to the resource:<programlisting>ServletContext context = SessionManager.getSession().getServletContext();
SharedResource resource = context.getAttribute("app.resource");</programlisting></para>

      <para>Attention has to be paid to the attribute's namespace, as it might
      interfer with other servlets. Prefixing the package name is an advisable
      convention.</para>

      <para>The approach presented above particularily makes sense if you have
      decided to use a mixed approach of wingS and other Servlet API based
      components as <code>ServletContext</code> is a Servlet API
      interface.</para>
    </sect1>

    <sect1>
      <title>Client Side Script Listeners</title>

      <para>wingS applications typically work with server side events. That
      is, whenever you press a button in a wingS application, a form is
      submitted or a link is pressed that calls the server side's registered
      ActionListener. From a user's point of view this creates the brief
      annoying pause between request and response, an effect intrinsic to web
      applications in general. Interestingly though, users have silently
      accepted this shift in UI behaviour from client apps to web
      applications.</para>

      <para>Is that acceptance by the user an excuse for not trying to improve
      this? No. In fact, there are several fascinating initialives<footnote>
          <para>Currently the wingS team is integrating the <ulink
          url="http://www.getahead.ltd.uk/dwr/">DWR</ulink> framework into
          wingS. Have a look at the WingSet demo.</para>
        </footnote> determined to improve the latency of web
      applications.</para>

      <para>Back to wingS. This is how you can integrate JavaScript in a wingS
      application:</para>

      <para>TODO: Explain general concept in wingS.</para>

      <itemizedlist>
        <listitem>
          <para>explain JavaScriptEvents, JavaScriptListener and how they can
          be added to components</para>
        </listitem>

        <listitem>
          <para>explain a simple application with a JavaScript Listener doing
          just a submit().</para>
        </listitem>

        <listitem>
          <para>explain JavaScript listeners, that reference other components
          like in this example from wingset/JavaScriptListenerExample</para>
        </listitem>
      </itemizedlist>

      <para>TODO: Explain demo.</para>

      <programlisting>STextField firstField  = new STextField();
STextField secondField  = new STextField();
STextField sumField  = new STextField();

  /*
   * Add the client side script listener. The variables
   * in curly braces are replaced by the actual IDs of the components.
   */
  private final static String JS_ADD_SCRIPT =
            "document.getElementById('{2}').
              getElementsByTagName('input')[0].value" +
            " = ((1.0 * document.getElementById('{0}').
              getElementsByTagName('input')[0].value)" +
            " + (1.0 * document.getElementById('{1}').
              getElementsByTagName('input')[0].value));"; 
  SComponent[] jsParams = new SComponent[]{firstField, secondField,
                                           sumField};
  
  JavaScriptListener jsListener;
  jsListener = new JavaScriptListener(JavaScriptEvent.ON_CHANGE,
                                      JS_ADD_SCRIPT,
                                      jsParams);

  firstField.addScriptListener(jsListener);
  secondField.addScriptListener(jsListener);
  sumField.addScriptListener(jsListener);</programlisting>
    </sect1>

    <sect1>
      <title>File Upload and Download</title>

      <sect2>
        <title>File Upload</title>

        <para>TODO</para>
      </sect2>

      <sect2>
        <title>File Download</title>

        <para>One way of providing a download is implementing your own Servlet
        with the Servlet API directly:</para>

        <para><programlisting>public class XLSServlet extends HttpServlet {

  protected void doGet(HttpServletRequest request, 
                       HttpServletResponse response)
      throws ServletException, IOException {

    doPost(request, response);
  }

  protected void doPost(HttpServletRequest request, 
                        HttpServletResponse response)
      throws ServletException, IOException {

    HSSFWorkbook sheet = HSSFWorkbook();
    response.setContentType("application/vnd.ms-excel");
    ServletOutputStream out = response.getOutputStream();
    out.write(sheet.toBytes()));
    response.flushBuffer();
  }
} </programlisting></para>

        <para>Another way is to extend a DynamicResource and overwrite its
        write() method. (TODO: Code example not tested, can anyone
        confirm/rework?)</para>

        <para><programlisting>public final class DynamicPDFDownload extends DynamicResource {

  public void write(Device out) throws IOException {
    DeviceOutputStream stream = new DeviceOutputStream(out);
    writePDF(baseDir, stream);
    stream.flush();
    out.close();
  }
} </programlisting></para>

        <para>Then you can externalize it via the
        ExternalizeManager.<programlisting>Map/*&lt;String,String&gt;*/ headers = new HashMap/*&lt;String,String&gt;*/();
headers.put("Content-Disposition", "attachment; filename=" + getFilename() );
String url = SessionManager.getSession().getExternalizeManager().externalize(pdfDownload, headers);  </programlisting></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Back Button Navigation</title>

      <para>The back button was conceived in the very beginning of the web
      when static content prevailed. Today's web landscape is dramatically
      different. The majority of content is created dynamically and web
      applications bring state and transactions into play.</para>

      <para>As intuitive and helpful back button navigation is using static
      pages, web application developers often wish they could just
      disable<footnote>
          <para>It can not be disabled, but the effect of the back button can
          be mitigated by telling the browser not to cache responses and
          redirecting it to a page containing explanatory information.</para>
        </footnote> it. Yet, we developers have to live with users clicking on
      back whenever they please. And let's face it, putting a message "Do NOT
      click the back button!" is a miserable solution, manifesting the
      incapacity of the applications creator.</para>

      <para>Therefore wingS gives you the power to detect and control the
      behaviour of back button events. The approach relies on our epoch
      checking mechanism. It enables you to handle the browsers back button
      navigation in three different ways:<orderedlist>
          <listitem>
            <para><emphasis role="bold">Default behaviour</emphasis> - ignore
            requests from old views and redisplay just the current view</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Allow back navigation</emphasis> - do
            nothing on back navigation, allow manipulations and clicks on
            hand-selected components</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Back navigation detection</emphasis> -
            advise the browser to reload the page on every back navigation and
            try to detect this event</para>
          </listitem>
        </orderedlist></para>

      <para>Let's take a look at the details in the next three
      sections.</para>

      <sect2>
        <title>Default Behaviour</title>

        <para>This mode is the default and safest way to cope with the browser
        back facility. It ensures that the user can only operate on the
        current view and is not able to perform any operations on expired
        views, which might lead to unexpected results.</para>

        <para>Let's look at a short example how frameworks like Apache Struts
        or Sun JSF might react. Suppose you were building an email application
        presenting a list of received emails with a delete button beneath each
        list entry. After clicking such a delete button, the application would
        present a confirmation dialog. If you had built your application in a
        way that the delete buttons referred to an index, a browser back click
        and click on another delete button would delete the wrong email! In
        the default configuration wingS avoids this by ignoring the last
        deletion click and it will just redisplay the first confirmation
        dialog.</para>

        <para>Please keep in mind, that you will be most likely using the HTTP
        POST operation to receive any form data from the browser. On pressing
        the back button this will typically display a query window, asking the
        user if he really wants to submit his last data again.</para>
      </sect2>

      <sect2>
        <title>Allow Back Navigation</title>

        <para>Another approach supported by wingS is to allow back navigation
        and support operations on hand-selected components. In this case three
        things must be triggered.<itemizedlist>
            <listitem>
              <para>Firstly, SForm needs to use HTTP GET to avoid the nagging
              confirmation dialog of the browsers on back navigations.</para>

              <para><code>form.setPostMethod(false);</code></para>
            </listitem>

            <listitem>
              <para>Secondly, disable page expiration. Otherwise every back
              navigation leads to a page reload presenting the current view
              again.</para>

              <para><code>form.getParentFrame().setNoCaching(true);</code></para>
            </listitem>

            <listitem>
              <para>Lastly, you have to disable the epoch checking on the
              desired components.</para>

              <para><code>anAlwaysValidComponent.setEpochCheckEnabled(false);</code></para>
            </listitem>
          </itemizedlist>On disabling the epoch check on a component you
        should be aware that consequently this component might receive input
        events at any time from developer's perspective. You must ensure that
        the action triggered will always lead to valid actions in your
        application. If you obey this you will be able to build web
        applications with the full comfort of modern web browsers and the
        comfort of object-oriented design.</para>
      </sect2>

      <sect2>
        <title>Back Navigation Detection</title>

        <para>The last technique implemented in wingS is to determine back
        navigations heuristically. Therefore the root <code>SFrame</code>
        offers a method to declare a virtual back button. But first we'll take
        a quick look behind the scenes.</para>

        <para>As mentioned wingS uses the epoch check feature to detect back
        operations. For this operation mode we do the following:<itemizedlist>
            <listitem>
              <para>Advise the browser to reload every page immediately
              (default).</para>

              <para><code>rootFrame.setNoCaching(false);</code></para>
            </listitem>

            <listitem>
              <para>Register a virtual back button.</para>

              <para><code>rootFrame.setBackButton(virtualBackButton);</code></para>
            </listitem>
          </itemizedlist></para>

        <para>To ensure that this feature will work reliable you should use a
        global <code>SForm</code> element contained in every page. This form
        component will have it's own epoch like all other input elements. As
        we advise the browser to refresh every page on each entry, a browser's
        back navigation will lead to an immediate reload of the last page.
        This last page will also contain the (expired) form component and
        therefore lead to an <code>InvalidLowLevelEvent</code>. Hence, the
        root frame will be notified about this
        <code>InvalidLowLevelEvent</code> and interpret this as a result of a
        back navigation event. After triggering the virtual back button all
        further <code>InvalidLowLevelEvent</code> will be ignored for a short
        period of time to avoid multiple triggers and/or false detected back
        navigations as a result of inadvertent double-clicks on the client
        side.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Error Page Display</title>

      <para>By default, if an exception occurs inside a wingS application,
      this error is logged via the logging mechanism. No other action is
      triggered. However, you can provide the user with an error page. For
      this, you need to provide a parameter in your application's web.xml
      file, like this:<programlisting>&lt;init-param&gt;
  &lt;param-name&gt;<emphasis role="bold">wings.error.template</emphasis>&lt;/param-name&gt;
  &lt;param-value&gt;<emphasis role="bold">/templates/ErrorTemplate.thtml</emphasis>&lt;/param-value&gt;
&lt;/init-param&gt;</programlisting></para>

      <para>The value of the parameter is a path to a wingS template relative
      to the directory the web application resides in. In this template you
      can provide the following constraints:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">EXCEPTION_MESSAGE</emphasis> - replaced
          with the message of the exception</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">EXCEPTION_STACK_TRACE</emphasis> -
          replaced with the stack trace of the exception</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">WINGS_VERSION</emphasis> - replaced with
          the wingS version and compile time</para>
        </listitem>
      </itemizedlist>

      <para>For an in-use example of this, look at the web.xml and
      ErrorTemplate.thtml files of the wingSet demo.</para>
    </sect1>

    <sect1>
      <title>Session Recording and Playback</title>

      <sect2>
        <title>Overview</title>

        <para>Session recording allows you to record a sequence of events by
        simply clicking through your web application. The recorded data is
        dumped into a java source file which - after compilation - can be used
        to replay the recorded events at a selected pace.</para>
      </sect2>

      <sect2>
        <title>Prerequisites</title>

        <para>The code should be generated with the components' names (if
        available) instead of the generated IDs. This makes it easier to
        identify events in the recording:<programlisting>&lt;init-param&gt;
  &lt;param-name&gt;wings.event.usenames&lt;/param-name&gt;
  &lt;param-value&gt;true&lt;/param-value&gt;
&lt;/init-param&gt;
&lt;init-param&gt;
  &lt;param-name&gt;wings.servlet.lookupname&lt;/param-name&gt;
  &lt;param-value&gt;Recording&lt;/param-value&gt;
&lt;/init-param&gt;</programlisting></para>

        <para>If a component has a name (name property of SComponent), the
        component receives events for this name as well (so-called named
        events). Therefore you must set an application-wide unique name for
        every component you want to click or modify.<programlisting>SButton button = new SButton("click");
button.setName("UniqueName1");</programlisting></para>
      </sect2>

      <sect2>
        <title>Generation of the session playback java source file</title>

        <para>For session recording, you can use any available test tool
        (jmeter, whatever ...). Alternatively, there is a servlet filter
        (org.wings.recorder.Recorder), that can be used to generate java
        sources for a client, that performes the recorded
        requests:<programlisting>&lt;filter&gt;
  &lt;filter-name&gt;Recorder&lt;/filter-name&gt;
  &lt;filter-class&gt;org.wings.recorder.Recorder&lt;/filter-class&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;wings.servlet.recorder.file&lt;/param-name&gt;
    &lt;param-value&gt;Recording&lt;/param-value&gt;
  &lt;/init-param&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;wings.servlet.lookupname&lt;/param-name&gt;
    &lt;param-value&gt;Recording&lt;/param-value&gt;
  &lt;/init-param&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
  &lt;filter-name&gt;Recorder&lt;/filter-name&gt;
  &lt;servlet-name&gt;WingSet&lt;/servlet-name&gt;
&lt;/filter-mapping&gt;</programlisting></para>

        <para>The filter appends a control panel at the end of the generated
        page. The text field sets the name of the recording. It will be used
        as the classname and filename of the generated source. The "start"
        -button starts the recording. The "stop"-button stops the recording
        and the sources will be generated. The java source file will be placed
        in the current directory of the servlet engine / application server
        jvm. Copy it to the wings main directory.</para>
      </sect2>

      <sect2>
        <title>Playback</title>

        <para>The playback tool (replay.sh) compiles the source and runs it in
        single-client mode (regression test / functional test) or with n
        clients in parallel (load test):<programlisting>replay.sh -d 1.0 http://localhost:8080/wingset/WingSet Recording 20</programlisting></para>

        <para>The playback tool supports slow/fast motion, load ramp, i
        iterations, n parallel clients.</para>
      </sect2>
    </sect1>

      <sect1>
        <title>Internationalization and Character encoding</title>
        <para>In contrast to earlier version of wingS, the character encoding
        used to communicate between the the browser and the wingS framework no
        longer defaults to local dependent character encodings, but UTF-8.
        This enables wingS to display and proceess input containing
        all characters represented in UTF-8. </para>

          <para>Currently all wingS supported browser are capable of handling UTF-8
        correctly, so this should be no issue.
        Please be aware that you might need additional fonts installed
        on your system (i.e. Arial Unicode in Microsoft Windows environments)
        to be able to display i.e. chinese characters.
        </para>

        <para>Nevertheless you have the possibility to override this default
        with your own character encodings depending on the locale configured
        in the client browser. Just provide a properties file called
        <code>org.wings.util.charset.properties</code> inside your <code>WEB-INF</code>
        directory with a map of Locale names to character encoding names.

        Refer to the example file in the WingSet demo or look at the
        <code>charset.properties</code> in the wingS distribution for an details.
        </para>

          <para>Please be aware of one open pitfall in wingS: Currently the template
          files for the layout managers are all expected to be in the ISO-8859-1 encoding.
          So your need to escape special characters.</para>
    </sect1>

    <sect1>
      <title>Best Practices</title>

      <para>Cherish the following principles and wingS projects will be a
      smooth and enjoyable ride.</para>

      <orderedlist>
        <listitem>
          <para>STemplateLayout - Understand how this layout manager works.
          The minimal overhead of using it pays off quickly. Your web designer
          will be able to style your application without touching your Java
          code. Read <xref linkend="STemplateLayout" /> for details.</para>
        </listitem>

        <listitem>
          <para>SRootLayout - Set a <code>SFrame</code>'s layout to a custom
          <code>SRootLayout</code> referencing a template file. The source
          code looks like this. <programlisting>URL url = 
  Thread.currentThread().getContextClassLoader().getResource("layout.thtml");
frame.setLayout(new SRootLayout(url));</programlisting></para>

          <para>Insure that the template contains the element
          <code>object</code> with attribute <code>content</code>. This
          element will be replaced with the frame's content. <programlisting>&lt;div id="title"&gt;Application Title&lt;/div&gt;
&lt;hr /&gt;
<emphasis role="bold">&lt;object name="content"&gt;&lt;/object&gt;</emphasis>
&lt;hr /&gt;
&lt;div id="footer"&gt;company, copyright, license notice&lt;/div&gt;</programlisting>This
          is a convenient way to define XHTML like a border or title appearing
          on every page, no matter what the content will be like.</para>
        </listitem>

        <listitem>
          <para>The total sum of testing cycles quickly justifies the
          investment of learning how to efficiently deploy a web application
          into the servlet container.</para>

          <itemizedlist>
            <listitem>
              <para>If Jakarta Tomcat is your choice, learn how to use the
              so-called "manager". With its predefined ant tasks you can
              install and remove web applications in the wink of an eye
              without the expensive stop and start of the complete Tomcat and
              without writing it into the webapps folder first.</para>
            </listitem>

            <listitem>
              <para>Alternatively, think about just deploying the context.xml
              to webapps folder and pointing its base to your project's build
              folder which then, of course, has to obey the webapps folder
              rules.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Beginning with Tomcat version 5.0 a new default session
          manager was introduced, called SimpleTcpReplicationManager (a
          subclass of StandardManager). It attempts to load the persistence
          storage on application startup and produces a warning-level
          exception looking like this:<programlisting>SEVERE: Exception loading sessions from persistent storage
java.io.WriteAbortedException: writing aborted;
java.io.NotSerializableException:
org.apache.catalina.loader.WebappClassLoader</programlisting>To use the
          non-clustered session manager use the following section in your web
          application's context definition in /META-INF/context.xml.</para>

          <programlisting>&lt;context&gt;
   &lt;manager    
       className="org.apache.catalina.session.StandardManager"
        pathname=""&gt;
   &lt;/manager&gt;
&lt;/context&gt;</programlisting>
        </listitem>

        <listitem>
          <para>Beware of the consequences of using a servlet container.
          Multiple requests can traverse static methods in parallel!</para>
        </listitem>

        <listitem>
          <para>Avoid setting visual features in Java code, instead define CSS
          classes with <code>SComponent.setStyle("xyz")</code>and reference a
          CSS where you determine the rendering with <code>.xyz { &lt;your
          style definitions&gt; }</code>.</para>
        </listitem>

        <listitem>
          <para>TODO: Explain loading as resource and benefit of changing the
          file at runtime.</para>
        </listitem>
      </orderedlist>
    </sect1>
  </chapter>

  <chapter>
    <title id="chapInsidewingS">Inside wingS</title>

    <para>Developers interested in the architecture of wingS will find this
    chapter useful as it helps unterstanding the source code.</para>

    <section>
      <title>Session Management</title>

      <para>A "session" is a logical conversation between one particular web
      browser and the server. Recall that HTTP involves request-response
      conversations between the web browser and the server. A session can span
      multiple such request-response conversations, and in the wingS case will
      typically be initiated when the wingS application is started. It will be
      terminated when the application explicitly closes the session, the web
      browser is closed or the session times out. Due to the nature of HTTP
      the server cannot tell automatically that a web browser is no longer
      "interested" so it must fall back on using a timeout. For better
      security it is recommended to provide your wingS application with an
      explicit "logoff" command, and encourage your users to use it ! (You can
      do this with a call to session.Session.exit)</para>

      <para>The session is managed by the servlet container, usually by
      associating a cookie with the name "JSESSIONID" with the HTTP requests.
      The particular value of the cookie then identifies to which session the
      request belongs. This mapping is all part of the standard java servlet
      framework. This in turn delegates handling of each request to
      <code>session.WingServlet</code> - you will set up the mapping between
      your web application name and this class as part of your servlet
      container configuration. (See the servlet tag in web.xml in an example
      application)</para>

      <para>The main servlet class, <code>session.WingServlet</code>, handles
      requests directly for resources that do not change (e.g. static images),
      otherwise it creates a session.SessionServlet instance appropriately for
      each new session and and delegates to this. The sessions's
      session.SessionServlet is thus the main coordinator and router of events
      to your wingS application code. Each instance will be associated with an
      instance of your main application class (which you configured using the
      "init-param" named "wings.mainclass" in your servlet container
      configuration). It also creates a session.Session instance which holds
      some useful instance data as well as sharing the implementation burden
      with <code>session.SessionServlet</code>. This instance is also
      transiently associated with the thread which is processing the HTTP
      request (since this will not change for the duration of the request)
      using session.SessionManager so that you can conveniently retrieve the
      session from your own application code using:
      <code>SessionManager.getSession()</code></para>

      <para>The first task for <code>session.SessionServlet</code> is to
      extract any parameters from the HTTP request, since this is how visual
      components will notify of some action like a user pressing a button, and
      to then trigger the appropriate wingS events. This is the stage where
      your application code will receive callbacks for any action listeners
      that you have registered, and in turn drive your whole application's
      logic. This is handled by passing any HTTP request parameters to the
      session's <code>session.LowLevelEventDispatcher</code> instance.</para>

      <para>After delivering all events <code>session.SessionServlet</code>
      needs to deliver the externalised representation of the appropriate
      resource as the HTTP response. If the requested resource indicates that
      it is for the default resource, i.e. the top level frame of your
      application, then it looks for the topmost frame associated with the
      session and "displays" this. Otherwise the request will be for an
      explicit resource, probably this will have been generated automatically
      using the externalisation framework when "displaying" some sub-component
      of the user-interface. It is rare that you need to explicitly know how
      to address user interface components. (This is covered in more detail
      later in this document).</para>

      <para>There is a magic identifier "_" which can be used to force the
      display of the top-level frame. This is very useful for debugging, and
      also for navigation back to the "home page" of your application.</para>

      <para>Top level frames are derived from <code>SFrame</code>. The
      show/hide methods actually add/remove the frame from the collection
      maintained by <code>session.SessionServlet</code>. This is how you can
      switch the "main window" in your application. Hence you can keep
      multiple windows "in the background" by holding the instances in your
      main application class, and switch rapidly between them.</para>

      <para>Your main application instance will be garbage collected when the
      session finishes, and typically you will access any "top level"
      application objects via this instance. I.e. where in a normal
      application you might have global static variables, these would be
      member variables of your main application instance in a wingS
      application. You can of course still use global static variables, if
      that is what you intend, in which case they will have a lifetime that
      encompasses all sessions.</para>

      <para>If you need to integrate some other piece of web technology you
      can use the functionality of the standard java servlet
      <code>HttpServletRequest</code> and <code>HttpSession</code> classes to
      communicate any common data required by different modules by using named
      session attributes. This keeps the code decoupled. For example:</para>

      <programlisting>public void setSessionFoo(HttpServletRequest request, MyFoo foo) 
    throws ServletException {
  
  HttpSession session = request.getSession();
  session.setAttribute("MySharedFoo", foo);
}

public MyFoo getSessionHelper(HttpServletRequest request) 
    throws ServletException {
  
  HttpSession session = request.getSession();
  Object x = session.getAttribute("MySharedFoo");
  if (x == null)
    throw new ServletException( ... );
  return((MyFoo) x);
}</programlisting>
    </section>

    <section>
      <title>Resources</title>

      <para>Resources provide a bridge between the user interface components
      and the externalisation mechanism. This allows user interface components
      to focus on high level tasks such as responding to events and ignore the
      messy issue of how to render themselves. A resource must be able to do
      two key things, which are explicit in the base class declaration of
      Resource:</para>

      <itemizedlist>
        <listitem>
          <para>Be referred to by a URL, hence implements
          <code>URLResource</code></para>
        </listitem>

        <listitem>
          <para>Render itself onto the HTTP response stream, hence implements
          <code>Renderable</code></para>
        </listitem>
      </itemizedlist>

      <para>URLs can be entirely arbitrary, in which case use a <ulink
      url="http://www.j-wings.org/javadoc/org/wings/SimpleURL.html"><code>SimpleURL</code></ulink>
      (e.g. to refer to another web application), or they can be relative to
      your web application context in which case use a <code>RequestURL</code>
      (e.g. for a resource deployed under your web application deployment
      directory). For further options see <ulink
      url="http://www.j-wings.org/javadoc/org/wings/externalizer/AbstractExternalizeManager.html"><code>AbstractExternalizeManager</code></ulink>
      flags. Resources will choose the type which is most suitable for
      themselves.</para>

      <section>
        <title>Resource Types</title>

        <para>The following resource classes are provided by
        wingS:<itemizedlist>
            <listitem>
              <para><ulink
              url="http://www.j-wings.org/javadoc/org/wings/StaticResource.html"><code>StaticResource</code></ulink>
              - base class for components whose representation does not
              change, e.g. images. Much of the implementation can be put into
              this base class so it has methods to write the raw data and
              represent its URL.</para>

              <para><itemizedlist>
                  <listitem>
                    <para><ulink
                    url="http://www.j-wings.org/javadoc/org/wings/ClasspathResource.html"><code>ClasspathResource</code></ulink>
                    - a static resource that is loaded by a class loader. This
                    is useful when you want to jar up a bunch of resources
                    (e.g. images) along with your java classes for deployment
                    to the servlet container. You can then refer to them using
                    your class namespace, e.g.
                    "com/acme/myapp/prettypicture.jpeg". You may not need to
                    use this directly (wingS uses it for static stylesheets),
                    but you are very likely to need the derived
                    ResourceImageIcon class which is for static images, and
                    would in fact be required for a JPEG file.</para>
                  </listitem>

                  <listitem>
                    <para><ulink
                    url="http://www.j-wings.org/javadoc/org/wings/FileResource.html"><code>FileResource</code></ulink>
                    - a static resource wrapped around a file stream. If the
                    resource is an image then use the derived FileImageIcon,
                    which will try and deduce dimensions.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>

            <listitem>
              <para><ulink
              url="http://www.j-wings.org/javadoc/org/wings/StringResource.html"><code>StringResource</code></ulink>
              - use this if you already have the raw representation data of
              some static resource as a string.</para>
            </listitem>

            <listitem>
              <para><ulink
              url="http://www.j-wings.org/javadoc/org/wings/DynamicResource.html"><code>DynamicResource</code></ulink>
              - base class for components whose representation changes, i.e.
              most user interface widgets. Because of the dynamic nature the
              URL of these resources is not constant, it is forced to a unique
              value on each subsequent request by an "epoch counter". This
              allows wingS to check that a request is for the most current
              representation of a resource, which is also an important
              security feature.<itemizedlist>
                  <listitem>
                    <para><ulink
                    url="http://www.j-wings.org/javadoc/org/wings/script/DynamicScriptResource.html"><code>script.DynamicScriptResource</code></ulink>
                    - implements externalisation for dynamic javascript</para>
                  </listitem>

                  <listitem>
                    <para><ulink
                    url="http://www.j-wings.org/javadoc/org/wings/style/DynamicStyleSheetResource.html"><code>style.DynamicStyleSheetResource</code></ulink>
                    - implements externalisation for dynamic stylesheet</para>
                  </listitem>

                  <listitem>
                    <para><ulink
                    url="http://www.j-wings.org/javadoc/org/wings/DynamicCodeResource.html"><code>DynamicCodeResource</code></ulink>
                    - actually only used for SFrame components. Delegates
                    externalisation to the frame.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
          </itemizedlist></para>
      </section>

      <section>
        <title>Mapping Resources</title>

        <para>As mentioned above resources provide the bridge to
        externalisation and this means that all resources must be able to
        refer to each other, so all resources must be assigned an id that can
        eventually be used in a URL or HTML form, (see Resource.getId).
        However this is not as simple as generating a new random string for
        each new object since the different resources listed above need
        different strategies for how to be referenced. Hence this process is
        managed by different externalizer.ExternalizeManager instances. This
        class (and its base class
        <code>externalizer.AbstractExternalizeManager</code>) maintains the
        mapping between id and resource. This happens on-demand when
        Resource.getId is called, which in turn calls
        externalizer.AbstractExternalizeManager.externalize. Note that at this
        stage no HTML is written, it simply initialises the resource so that
        it can be addressed. Once this is done a
        <code>externalizer.ExternalizedResource</code> instance is used to
        hold various bits of information that will be needed for subsequent
        externalisation, such as MIME type and whether any special HTTP
        headers are needed.</para>

        <para>The final stage of externalisation (called from SessionServlet)
        will call on the appropriate externalizer.ExternalizeManager to write
        an externalised representation of the
        <code>externalizer.ExternalizedResource</code>. This is delegated to a
        externalizer.Externalizer implementation specific to the MIME type of
        the resource (since this is how HTTP identifies different resource
        data types).</para>

        <para>There is also a system-wide manager,
        <code>externalizer.SystemExternalizeManager</code>, which is used for
        resources which are not bound to a session (e.g. static files). The
        <code>session.WingsServlet</code> identifies these requests at an
        early stage since the resource id starts with a minus character
        ("-").</para>
      </section>
    </section>

    <section>
      <title>Delivering Events</title>

      <para>The wingS framework needs to understand user actions in the web
      browser, and then map these to user interface events in the code
      executing in the servlet container. Most of these events are derived
      from standard java SDK classes such as java.awt.AWTEvent. Recalling the
      limitations of HTTP, these events must be encoded in the HTTP request,
      either in the URL or in posted form data. Hence the first task for
      session.SessionServlet is to extract any parameters from the HTTP
      request, and pass these to the session's
      <code>session.LowLevelEventDispatcher</code> instance. This extracts
      encoded events then passes them on to any LowLevelEventListener
      instances which have registered interest - these will be the actual user
      interface widgets like buttons, lists and tables.</para>

      <para>The dispatcher does some initial decoding of the HTTP request
      parameters, for example, an additional value may be encoded into the
      HTTP request parameter name using a "_" seperator. It then passes the
      events on to the listeners using
      <code>LowLevelEventListener.processLowLevelEvent()</code>. The specific
      widget will then turn this "low level" event into something semantically
      meaningful like a button selection. Widget implementors have to go to
      some trouble to ensure that events fire in the correct order so events
      are categorised as<itemizedlist>
          <listitem>
            <para>Low level - the raw events from HTTP request</para>
          </listitem>

          <listitem>
            <para>Intermediate level - representing some kind of widget state
            change "in progress"</para>
          </listitem>

          <listitem>
            <para>High level - what you as a wingS API user are typically
            interested in</para>
          </listitem>
        </itemizedlist></para>

      <para>Conceptually this should be fairly clear, you will see lots of
      logic related to this if you dig around the code, but this is unlikely
      to conern you unless you are implementing your own widgets. The main
      challenge is that an HTTP request will deliver multiple changes all in
      one go, unlike a classical application where all events would be nicely
      serialised. Hence the dispatcher has to try and work out a sensible set
      of events to deliver, and to delay some state changes so that components
      do not end up in an inconsistent state due to the order in which events
      fire.</para>
    </section>

    <section>
      <title>Externalisation and Rendering</title>

      <para>Externalisation is the process of rendering the wingS user
      interface in the HTTP response to the web browser. As explained in the
      section on resources, the first stage is to make resources referenceable
      by assigning an id. The final stage, which this section describes, is to
      write the actual representation on to a stream.</para>

      <para>First the session.SessionServlet must create an output stream. It
      uses a factory instance, <code>io.DeviceFactory</code> to create the
      appropriate <code>io.Device</code> derived stream. You can configure
      your own device factory class using the "wings.device.factory"
      init-param of your wingS application servlet. This is a very useful hook
      for debugging the raw output.</para>

      <para>The session.SessionServlet locates the top-level frame, and then
      calls externalizer.ExternalizeManager.deliver on its
      externalizer.ExternalizedResource. This method sets up various HTTP
      headers appropriately for the kind of resource (e.g. MIME type, caching)
      and then it delegates to <code>externalizer.Externalizer.write()</code>.
      Different derived classes are used depending on resource type. For
      example images must be appropriately encoded in GIF or PNG format,
      whereas static and dynamic resources delegate to the interface
      <code>Renderable</code>. This is probably the simplest interface, but
      can have a very complicated implementation ! The majority of objects you
      are likely to be interested in externalise themselves via the
      <code>Renderable</code> interface.</para>
    </section>
  </chapter>

  <appendix>
    <title>Resources</title>

    <para>The wingS project is hosted by SourceForge at <ulink
    url="http://sourceforge.net/projects/j-wings">http://sourceforge.net/projects/j-wings</ulink>.
    Here you find the latest releases, the CVS repository, and our mailing
    lists.</para>

    <para>Project members on the mailing lists wingS-users and
    wingS-developers provide fast and thorough answers to your
    questions.</para>

    <para>Professional support for wingS is provided by <ulink
    url="http://www.mercatis.com">mercatis information
    technologies</ulink>.</para>
  </appendix>

  <appendix id="gfdl">
    <appendixinfo>
      <title>GNU Free Documentation License</title>

      <pubdate>Version 1.2, November 2002</pubdate>

      <copyright>
        <year>2000,2001,2002</year>

        <holder>Free Software Foundation, Inc.</holder>
      </copyright>

      <legalnotice id="gfdl-legalnotice">
        <para><address>Free Software Foundation, Inc., <street>51 Franklin St, Fifth Floor</street><city>Boston</city>, <state>MA</state>, <postcode>02110-1301, </postcode><country>USA</country></address>Everyone
        is permitted to copy and distribute verbatim copies of this license
        document, but changing it is not allowed.</para>
      </legalnotice>

      <releaseinfo>Version 1.2, November 2002</releaseinfo>
    </appendixinfo>

    <title>GNU Free Documentation License</title>

    <section id="gfdl-0">
      <title>PREAMBLE</title>

      <para>The purpose of this License is to make a manual, textbook, or
      other functional and useful document "free" in the sense of freedom: to
      assure everyone the effective freedom to copy and redistribute it, with
      or without modifying it, either commercially or noncommercially.
      Secondarily, this License preserves for the author and publisher a way
      to get credit for their work, while not being considered responsible for
      modifications made by others.</para>

      <para>This License is a kind of "copyleft", which means that derivative
      works of the document must themselves be free in the same sense. It
      complements the GNU General Public License, which is a copyleft license
      designed for free software.</para>

      <para>We have designed this License in order to use it for manuals for
      free software, because free software needs free documentation: a free
      program should come with manuals providing the same freedoms that the
      software does. But this License is not limited to software manuals; it
      can be used for any textual work, regardless of subject matter or
      whether it is published as a printed book. We recommend this License
      principally for works whose purpose is instruction or reference.</para>
    </section>

    <section id="gfdl-1">
      <title>APPLICABILITY AND DEFINITIONS</title>

      <para id="gfdl-doc">This License applies to any manual or other work, in
      any medium, that contains a notice placed by the copyright holder saying
      it can be distributed under the terms of this License. Such a notice
      grants a world-wide, royalty-free license, unlimited in duration, to use
      that work under the conditions stated herein. The "Document", below,
      refers to any such manual or work. Any member of the public is a
      licensee, and is addressed as "you". You accept the license if you copy,
      modify or distribute the work in a way requiring permission under
      copyright law.</para>

      <para id="gfdl-mod-ver">A "Modified Version" of the Document means any
      work containing the Document or a portion of it, either copied verbatim,
      or with modifications and/or translated into another language.</para>

      <para id="gfdl-secnd-sect">A "Secondary Section" is a named appendix or
      a front-matter section of the Document that deals exclusively with the
      relationship of the publishers or authors of the Document to the
      Document's overall subject (or to related matters) and contains nothing
      that could fall directly within that overall subject. (Thus, if the
      Document is in part a textbook of mathematics, a Secondary Section may
      not explain any mathematics.) The relationship could be a matter of
      historical connection with the subject or with related matters, or of
      legal, commercial, philosophical, ethical or political position
      regarding them.</para>

      <para id="gfdl-inv-sect">The "Invariant Sections" are certain Secondary
      Sections whose titles are designated, as being those of Invariant
      Sections, in the notice that says that the Document is released under
      this License. If a section does not fit the above definition of
      Secondary then it is not allowed to be designated as Invariant. The
      Document may contain zero Invariant Sections. If the Document does not
      identify any Invariant Sections then there are none.</para>

      <para id="gfdl-cov-text">The "Cover Texts" are certain short passages of
      text that are listed, as Front-Cover Texts or Back-Cover Texts, in the
      notice that says that the Document is released under this License. A
      Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at
      most 25 words.</para>

      <para id="gfdl-transparent">A "Transparent" copy of the Document means a
      machine-readable copy, represented in a format whose specification is
      available to the general public, that is suitable for revising the
      document straightforwardly with generic text editors or (for images
      composed of pixels) generic paint programs or (for drawings) some widely
      available drawing editor, and that is suitable for input to text
      formatters or for automatic translation to a variety of formats suitable
      for input to text formatters. A copy made in an otherwise Transparent
      file format whose markup, or absence of markup, has been arranged to
      thwart or discourage subsequent modification by readers is not
      Transparent. An image format is not Transparent if used for any
      substantial amount of text. A copy that is not "Transparent" is called
      "Opaque".</para>

      <para>Examples of suitable formats for Transparent copies include plain
      ASCII without markup, Texinfo input format, LaTeX input format, SGML or
      XML using a publicly available DTD, and standard-conforming simple HTML,
      PostScript or PDF designed for human modification. Examples of
      transparent image formats include PNG, XCF and JPG. Opaque formats
      include proprietary formats that can be read and edited only by
      proprietary word processors, SGML or XML for which the DTD and/or
      processing tools are not generally available, and the machine-generated
      HTML, PostScript or PDF produced by some word processors for output
      purposes only.</para>

      <para id="gfdl-title-page">The "Title Page" means, for a printed book,
      the title page itself, plus such following pages as are needed to hold,
      legibly, the material this License requires to appear in the title page.
      For works in formats which do not have any title page as such, "Title
      Page" means the text near the most prominent appearance of the work's
      title, preceding the beginning of the body of the text.</para>

      <para id="gfdl-entitled">A section "Entitled XYZ" means a named subunit
      of the Document whose title either is precisely XYZ or contains XYZ in
      parentheses following text that translates XYZ in another language.
      (Here XYZ stands for a specific section name mentioned below, such as
      "Acknowledgements", "Dedications", "Endorsements", or "History".) To
      "Preserve the Title" of such a section when you modify the Document
      means that it remains a section "Entitled XYZ" according to this
      definition.</para>

      <para>The Document may include Warranty Disclaimers next to the notice
      which states that this License applies to the Document. These Warranty
      Disclaimers are considered to be included by reference in this License,
      but only as regards disclaiming warranties: any other implication that
      these Warranty Disclaimers may have is void and has no effect on the
      meaning of this License.</para>
    </section>

    <section id="gfdl-2">
      <title>VERBATIM COPYING</title>

      <para>You may copy and distribute the Document in any medium, either
      commercially or noncommercially, provided that this License, the
      copyright notices, and the license notice saying this License applies to
      the Document are reproduced in all copies, and that you add no other
      conditions whatsoever to those of this License. You may not use
      technical measures to obstruct or control the reading or further copying
      of the copies you make or distribute. However, you may accept
      compensation in exchange for copies. If you distribute a large enough
      number of copies you must also follow the conditions in section
      3.</para>

      <para>You may also lend copies, under the same conditions stated above,
      and you may publicly display copies.</para>
    </section>

    <section id="gfdl-3">
      <title>COPYING IN QUANTITY</title>

      <para>If you publish printed copies (or copies in media that commonly
      have printed covers) of the Document, numbering more than 100, and the
      Document's license notice requires Cover Texts, you must enclose the
      copies in covers that carry, clearly and legibly, all these Cover Texts:
      Front-Cover Texts on the front cover, and Back-Cover Texts on the back
      cover. Both covers must also clearly and legibly identify you as the
      publisher of these copies. The front cover must present the full title
      with all words of the title equally prominent and visible. You may add
      other material on the covers in addition. Copying with changes limited
      to the covers, as long as they preserve the title of the Document and
      satisfy these conditions, can be treated as verbatim copying in other
      respects.</para>

      <para>If the required texts for either cover are too voluminous to fit
      legibly, you should put the first ones listed (as many as fit
      reasonably) on the actual cover, and continue the rest onto adjacent
      pages.</para>

      <para>If you publish or distribute Opaque copies of the Document
      numbering more than 100, you must either include a machine-readable
      Transparent copy along with each Opaque copy, or state in or with each
      Opaque copy a computer-network location from which the general
      network-using public has access to download using public-standard
      network protocols a complete Transparent copy of the Document, free of
      added material. If you use the latter option, you must take reasonably
      prudent steps, when you begin distribution of Opaque copies in quantity,
      to ensure that this Transparent copy will remain thus accessible at the
      stated location until at least one year after the last time you
      distribute an Opaque copy (directly or through your agents or retailers)
      of that edition to the public.</para>

      <para>It is requested, but not required, that you contact the authors of
      the Document well before redistributing any large number of copies, to
      give them a chance to provide you with an updated version of the
      Document.</para>
    </section>

    <section id="gfdl-4">
      <title>MODIFICATIONS</title>

      <para>You may copy and distribute a Modified Version of the Document
      under the conditions of sections 2 and 3 above, provided that you
      release the Modified Version under precisely this License, with the
      Modified Version filling the role of the Document, thus licensing
      distribution and modification of the Modified Version to whoever
      possesses a copy of it. In addition, you must do these things in the
      Modified Version:</para>

      <orderedlist id="gfdl-modif-cond" numeration="upperalpha">
        <title>GNU FDL Modification Conditions</title>

        <listitem>
          <simpara>Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the History
          section of the Document). You may use the same title as a previous
          version if the original publisher of that version gives
          permission.</simpara>
        </listitem>

        <listitem>
          <simpara>List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in the
          Modified Version, together with at least five of the principal
          authors of the Document (all of its principal authors, if it has
          fewer than five), unless they release you from this
          requirement.</simpara>
        </listitem>

        <listitem>
          <simpara>State on the Title page the name of the publisher of the
          Modified Version, as the publisher.</simpara>
        </listitem>

        <listitem>
          <simpara>Preserve all the copyright notices of the
          Document.</simpara>
        </listitem>

        <listitem>
          <simpara>Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.</simpara>
        </listitem>

        <listitem>
          <simpara>Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified Version
          under the terms of this License, in the form shown in the <link
          linkend="gfdl-addendum">Addendum</link> below.</simpara>
        </listitem>

        <listitem>
          <simpara>Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's license
          notice.</simpara>
        </listitem>

        <listitem>
          <simpara>Include an unaltered copy of this License.</simpara>
        </listitem>

        <listitem>
          <simpara>Preserve the section Entitled "History", Preserve its
          Title, and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the Title
          Page. If there is no section Entitled "History" in the Document,
          create one stating the title, year, authors, and publisher of the
          Document as given on its Title Page, then add an item describing the
          Modified Version as stated in the previous sentence.</simpara>
        </listitem>

        <listitem>
          <simpara>Preserve the network location, if any, given in the
          Document for public access to a Transparent copy of the Document,
          and likewise the network locations given in the Document for
          previous versions it was based on. These may be placed in the
          "History" section. You may omit a network location for a work that
          was published at least four years before the Document itself, or if
          the original publisher of the version it refers to gives
          permission.</simpara>
        </listitem>

        <listitem>
          <simpara>For any section Entitled "Acknowledgements" or
          "Dedications", Preserve the Title of the section, and preserve in
          the section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.</simpara>
        </listitem>

        <listitem>
          <simpara>Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles. Section numbers or the
          equivalent are not considered part of the section titles.</simpara>
        </listitem>

        <listitem>
          <simpara>Delete any section Entitled "Endorsements". Such a section
          may not be included in the Modified Version.</simpara>
        </listitem>

        <listitem>
          <simpara>Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.</simpara>
        </listitem>

        <listitem>
          <simpara>Preserve any Warranty Disclaimers.</simpara>
        </listitem>
      </orderedlist>

      <para>If the Modified Version includes new front-matter sections or
      appendices that qualify as Secondary Sections and contain no material
      copied from the Document, you may at your option designate some or all
      of these sections as invariant. To do this, add their titles to the list
      of Invariant Sections in the Modified Version's license notice. These
      titles must be distinct from any other section titles.</para>

      <para>You may add a section Entitled "Endorsements", provided it
      contains nothing but endorsements of your Modified Version by various
      parties--for example, statements of peer review or that the text has
      been approved by an organization as the authoritative definition of a
      standard.</para>

      <para>You may add a passage of up to five words as a Front-Cover Text,
      and a passage of up to 25 words as a Back-Cover Text, to the end of the
      list of Cover Texts in the Modified Version. Only one passage of
      Front-Cover Text and one of Back-Cover Text may be added by (or through
      arrangements made by) any one entity. If the Document already includes a
      cover text for the same cover, previously added by you or by arrangement
      made by the same entity you are acting on behalf of, you may not add
      another; but you may replace the old one, on explicit permission from
      the previous publisher that added the old one.</para>

      <para>The author(s) and publisher(s) of the Document do not by this
      License give permission to use their names for publicity for or to
      assert or imply endorsement of any Modified Version.</para>
    </section>

    <section id="gfdl-5">
      <title>COMBINING DOCUMENTS</title>

      <para>You may combine the Document with other documents released under
      this License, under the terms defined in <link linkend="gfdl-4">section
      4</link> above for modified versions, provided that you include in the
      combination all of the Invariant Sections of all of the original
      documents, unmodified, and list them all as Invariant Sections of your
      combined work in its license notice, and that you preserve all their
      Warranty Disclaimers.</para>

      <para>The combined work need only contain one copy of this License, and
      multiple identical Invariant Sections may be replaced with a single
      copy. If there are multiple Invariant Sections with the same name but
      different contents, make the title of each such section unique by adding
      at the end of it, in parentheses, the name of the original author or
      publisher of that section if known, or else a unique number. Make the
      same adjustment to the section titles in the list of Invariant Sections
      in the license notice of the combined work.</para>

      <para>In the combination, you must combine any sections Entitled
      "History" in the various original documents, forming one section
      Entitled "History"; likewise combine any sections Entitled
      "Acknowledgements", and any sections Entitled "Dedications". You must
      delete all sections Entitled "Endorsements".</para>
    </section>

    <section id="gfdl-6">
      <title>COLLECTIONS OF DOCUMENTS</title>

      <para>You may make a collection consisting of the Document and other
      documents released under this License, and replace the individual copies
      of this License in the various documents with a single copy that is
      included in the collection, provided that you follow the rules of this
      License for verbatim copying of each of the documents in all other
      respects.</para>

      <para>You may extract a single document from such a collection, and
      distribute it individually under this License, provided you insert a
      copy of this License into the extracted document, and follow this
      License in all other respects regarding verbatim copying of that
      document.</para>
    </section>

    <section id="gfdl-7">
      <title>AGGREGATION WITH INDEPENDENT WORKS</title>

      <para>A compilation of the Document or its derivatives with other
      separate and independent documents or works, in or on a volume of a
      storage or distribution medium, is called an "aggregate" if the
      copyright resulting from the compilation is not used to limit the legal
      rights of the compilation's users beyond what the individual works
      permit. When the Document is included in an aggregate, this License does
      not apply to the other works in the aggregate which are not themselves
      derivative works of the Document.</para>

      <para>If the Cover Text requirement of section 3 is applicable to these
      copies of the Document, then if the Document is less than one half of
      the entire aggregate, the Document's Cover Texts may be placed on covers
      that bracket the Document within the aggregate, or the electronic
      equivalent of covers if the Document is in electronic form. Otherwise
      they must appear on printed covers that bracket the whole
      aggregate.</para>
    </section>

    <section id="gfdl-8">
      <title>TRANSLATION</title>

      <para>Translation is considered a kind of modification, so you may
      distribute translations of the Document under the terms of section 4.
      Replacing Invariant Sections with translations requires special
      permission from their copyright holders, but you may include
      translations of some or all Invariant Sections in addition to the
      original versions of these Invariant Sections. You may include a
      translation of this License, and all the license notices in the
      Document, and any Warranty Disclaimers, provided that you also include
      the original English version of this License and the original versions
      of those notices and disclaimers. In case of a disagreement between the
      translation and the original version of this License or a notice or
      disclaimer, the original version will prevail.</para>

      <para>If a section in the Document is Entitled "Acknowledgements",
      "Dedications", or "History", the requirement (section 4) to Preserve its
      Title (section 1) will typically require changing the actual
      title.</para>
    </section>

    <section id="gfdl-9">
      <title>TERMINATION</title>

      <para>You may not copy, modify, sublicense, or distribute the Document
      except as expressly provided for under this License. Any other attempt
      to copy, modify, sublicense or distribute the Document is void, and will
      automatically terminate your rights under this License. However, parties
      who have received copies, or rights, from you under this License will
      not have their licenses terminated so long as such parties remain in
      full compliance.</para>
    </section>

    <section id="gfdl-10">
      <title>FUTURE REVISIONS OF THIS LICENSE</title>

      <para>The Free Software Foundation may publish new, revised versions of
      the GNU Free Documentation License from time to time. Such new versions
      will be similar in spirit to the present version, but may differ in
      detail to address new problems or concerns. See
      http://www.gnu.org/copyleft/.</para>

      <para>Each version of the License is given a distinguishing version
      number. If the Document specifies that a particular numbered version of
      this License "or any later version" applies to it, you have the option
      of following the terms and conditions either of that specified version
      or of any later version that has been published (not as a draft) by the
      Free Software Foundation. If the Document does not specify a version
      number of this License, you may choose any version ever published (not
      as a draft) by the Free Software Foundation.</para>
    </section>

    <section id="gfdl-addendum">
      <title>ADDENDUM: How to use this License for your documents</title>

      <para>To use this License in a document you have written, include a copy
      of the License in the document and put the following copyright and
      license notices just after the title page:</para>

      <blockquote id="copyright-sample">
        <title>Sample Invariant Sections list</title>

        <para>Copyright (c) YEAR YOUR NAME. Permission is granted to copy,
        distribute and/or modify this document under the terms of the GNU Free
        Documentation License, Version 1.2 or any later version published by
        the Free Software Foundation; with no Invariant Sections, no
        Front-Cover Texts, and no Back-Cover Texts. A copy of the license is
        included in the section entitled "GNU Free Documentation
        License".</para>
      </blockquote>

      <para>If you have Invariant Sections, Front-Cover Texts and Back-Cover
      Texts, replace the "with...Texts." line with this:</para>

      <blockquote id="inv-cover-sample">
        <title>Sample Invariant Sections list</title>

        <para>with the Invariant Sections being LIST THEIR TITLES, with the
        Front-Cover Texts being LIST, and with the Back-Cover Texts being
        LIST.</para>
      </blockquote>

      <para>If you have Invariant Sections without Cover Texts, or some other
      combination of the three, merge those two alternatives to suit the
      situation.</para>

      <para>If your document contains nontrivial examples of program code, we
      recommend releasing these examples in parallel under your choice of free
      software license, such as the GNU General Public License, to permit
      their use in free software.</para>
    </section>
  </appendix>
</book>